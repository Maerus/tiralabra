

 ** Sun Oct 02 19:37:40 EEST 2016 **

.......
.###s..
#..##.#
.##..#.
#.#.#.#
##..#.#
..####.
#..##.#
....#.#
.####..
.#g##..
#.#.#..

[(0,0): F] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] [(5,0): F] [(6,0): F] 
[(0,1): F] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): S] [(5,1): F] [(6,1): F] 
[(0,2): W] [(1,2): F] [(2,2): F] [(3,2): W] [(4,2): W] [(5,2): F] [(6,2): W] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): F] [(4,3): F] [(5,3): W] [(6,3): F] 
[(0,4): W] [(1,4): F] [(2,4): W] [(3,4): F] [(4,4): W] [(5,4): F] [(6,4): W] 
[(0,5): W] [(1,5): W] [(2,5): F] [(3,5): F] [(4,5): W] [(5,5): F] [(6,5): W] 
[(0,6): F] [(1,6): F] [(2,6): W] [(3,6): W] [(4,6): W] [(5,6): W] [(6,6): F] 
[(0,7): W] [(1,7): F] [(2,7): F] [(3,7): W] [(4,7): W] [(5,7): F] [(6,7): W] 
[(0,8): F] [(1,8): F] [(2,8): F] [(3,8): F] [(4,8): W] [(5,8): F] [(6,8): W] 
[(0,9): F] [(1,9): W] [(2,9): W] [(3,9): W] [(4,9): W] [(5,9): F] [(6,9): F] 
[(0,10): F] [(1,10): W] [(2,10): G] [(3,10): W] [(4,10): W] [(5,10): F] [(6,10): F] 
[(0,11): W] [(1,11): F] [(2,11): W] [(3,11): F] [(4,11): W] [(5,11): F] [(6,11): F] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 2 ms

Tiles walked on: 
[4,1] type: START, distance: 0
[5,2] type: FLOOR, distance: 1
[4,3] type: FLOOR, distance: 2
[3,4] type: FLOOR, distance: 3
[2,5] type: FLOOR, distance: 4
[1,6] type: FLOOR, distance: 5
[1,7] type: FLOOR, distance: 6
[0,8] type: FLOOR, distance: 7
[0,9] type: FLOOR, distance: 8
[0,10] type: FLOOR, distance: 9
[1,11] type: FLOOR, distance: 10
[2,10] type: GOAL, distance: 11

Dijkstra out!


 ** Sun Oct 02 19:48:11 EEST 2016 **

s....
####.
.....
.####
....g

[(0,0): S] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] 
[(0,1): W] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): F] 
[(0,2): F] [(1,2): F] [(2,2): F] [(3,2): F] [(4,2): F] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): W] [(4,3): W] 
[(0,4): F] [(1,4): F] [(2,4): F] [(3,4): F] [(4,4): G] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 2 ms

Tiles walked on: 
[0,0] type: START, distance: 0
[1,0] type: FLOOR, distance: 1
[2,0] type: FLOOR, distance: 2
[3,0] type: FLOOR, distance: 3
[4,1] type: FLOOR, distance: 4
[3,2] type: FLOOR, distance: 5
[2,2] type: FLOOR, distance: 6
[1,2] type: FLOOR, distance: 7
[0,3] type: FLOOR, distance: 8
[1,4] type: FLOOR, distance: 9
[2,4] type: FLOOR, distance: 10
[3,4] type: FLOOR, distance: 11
[4,4] type: GOAL, distance: 12

Dijkstra out!


 ** Sun Oct 02 19:48:59 EEST 2016 **

s....
####.
.....
.####
....g

[(0,0): S] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] 
[(0,1): W] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): F] 
[(0,2): F] [(1,2): F] [(2,2): F] [(3,2): F] [(4,2): F] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): W] [(4,3): W] 
[(0,4): F] [(1,4): F] [(2,4): F] [(3,4): F] [(4,4): G] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 1 ms

Tiles walked on: 
[0,0] type: START, distance: 0
[1,0] type: FLOOR, distance: 1
[2,0] type: FLOOR, distance: 2
[3,0] type: FLOOR, distance: 3
[4,1] type: FLOOR, distance: 4
[3,2] type: FLOOR, distance: 5
[2,2] type: FLOOR, distance: 6
[1,2] type: FLOOR, distance: 7
[0,3] type: FLOOR, distance: 8
[1,4] type: FLOOR, distance: 9
[2,4] type: FLOOR, distance: 10
[3,4] type: FLOOR, distance: 11
[4,4] type: GOAL, distance: 12

Dijkstra out!


 ** Sun Oct 02 19:50:18 EEST 2016 **

s....
####.
.....
.####
....g

[(0,0): S] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] 
[(0,1): W] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): F] 
[(0,2): F] [(1,2): F] [(2,2): F] [(3,2): F] [(4,2): F] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): W] [(4,3): W] 
[(0,4): F] [(1,4): F] [(2,4): F] [(3,4): F] [(4,4): G] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 2 ms

Tiles walked on: 
[0,0] type: START, distance: 0
[1,0] type: FLOOR, distance: 1
[2,0] type: FLOOR, distance: 2
[3,0] type: FLOOR, distance: 3
[4,1] type: FLOOR, distance: 4
[3,2] type: FLOOR, distance: 5
[2,2] type: FLOOR, distance: 6
[1,2] type: FLOOR, distance: 7
[0,3] type: FLOOR, distance: 8
[1,4] type: FLOOR, distance: 9
[2,4] type: FLOOR, distance: 10
[3,4] type: FLOOR, distance: 11
[4,4] type: GOAL, distance: 12

Dijkstra out!


 ** Sun Oct 02 19:50:58 EEST 2016 **

s....
####.
.....
.####
....g

[(0,0): S] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] 
[(0,1): W] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): F] 
[(0,2): F] [(1,2): F] [(2,2): F] [(3,2): F] [(4,2): F] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): W] [(4,3): W] 
[(0,4): F] [(1,4): F] [(2,4): F] [(3,4): F] [(4,4): G] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 2 ms

Tiles walked on: 
[0,0] type: START, distance: 0
[1,0] type: FLOOR, distance: 1
[2,0] type: FLOOR, distance: 2
[3,0] type: FLOOR, distance: 3
[4,1] type: FLOOR, distance: 4
[3,2] type: FLOOR, distance: 5
[2,2] type: FLOOR, distance: 6
[1,2] type: FLOOR, distance: 7
[0,3] type: FLOOR, distance: 8
[1,4] type: FLOOR, distance: 9
[2,4] type: FLOOR, distance: 10
[3,4] type: FLOOR, distance: 11
[4,4] type: GOAL, distance: 12

Dijkstra out!


 ** Sun Oct 02 19:51:28 EEST 2016 **

.......
.###s..
#..##.#
.##..#.
#.#.#.#
##..#.#
..####.
#..##.#
....#.#
.####..
.#g##..
#.#.#..

[(0,0): F] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] [(5,0): F] [(6,0): F] 
[(0,1): F] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): S] [(5,1): F] [(6,1): F] 
[(0,2): W] [(1,2): F] [(2,2): F] [(3,2): W] [(4,2): W] [(5,2): F] [(6,2): W] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): F] [(4,3): F] [(5,3): W] [(6,3): F] 
[(0,4): W] [(1,4): F] [(2,4): W] [(3,4): F] [(4,4): W] [(5,4): F] [(6,4): W] 
[(0,5): W] [(1,5): W] [(2,5): F] [(3,5): F] [(4,5): W] [(5,5): F] [(6,5): W] 
[(0,6): F] [(1,6): F] [(2,6): W] [(3,6): W] [(4,6): W] [(5,6): W] [(6,6): F] 
[(0,7): W] [(1,7): F] [(2,7): F] [(3,7): W] [(4,7): W] [(5,7): F] [(6,7): W] 
[(0,8): F] [(1,8): F] [(2,8): F] [(3,8): F] [(4,8): W] [(5,8): F] [(6,8): W] 
[(0,9): F] [(1,9): W] [(2,9): W] [(3,9): W] [(4,9): W] [(5,9): F] [(6,9): F] 
[(0,10): F] [(1,10): W] [(2,10): G] [(3,10): W] [(4,10): W] [(5,10): F] [(6,10): F] 
[(0,11): W] [(1,11): F] [(2,11): W] [(3,11): F] [(4,11): W] [(5,11): F] [(6,11): F] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 2 ms

Tiles walked on: 
[4,1] type: START, distance: 0
[5,2] type: FLOOR, distance: 1
[4,3] type: FLOOR, distance: 2
[3,4] type: FLOOR, distance: 3
[2,5] type: FLOOR, distance: 4
[1,6] type: FLOOR, distance: 5
[1,7] type: FLOOR, distance: 6
[0,8] type: FLOOR, distance: 7
[0,9] type: FLOOR, distance: 8
[0,10] type: FLOOR, distance: 9
[1,11] type: FLOOR, distance: 10
[2,10] type: GOAL, distance: 11

Dijkstra out!


 ** Sun Oct 02 19:51:32 EEST 2016 **

s....
####.
.....
.####
....g

[(0,0): S] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] 
[(0,1): W] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): F] 
[(0,2): F] [(1,2): F] [(2,2): F] [(3,2): F] [(4,2): F] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): W] [(4,3): W] 
[(0,4): F] [(1,4): F] [(2,4): F] [(3,4): F] [(4,4): G] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 1 ms

Tiles walked on: 
[0,0] type: START, distance: 0
[1,0] type: FLOOR, distance: 1
[2,0] type: FLOOR, distance: 2
[3,0] type: FLOOR, distance: 3
[4,1] type: FLOOR, distance: 4
[3,2] type: FLOOR, distance: 5
[2,2] type: FLOOR, distance: 6
[1,2] type: FLOOR, distance: 7
[0,3] type: FLOOR, distance: 8
[1,4] type: FLOOR, distance: 9
[2,4] type: FLOOR, distance: 10
[3,4] type: FLOOR, distance: 11
[4,4] type: GOAL, distance: 12

Dijkstra out!


 ** Sun Oct 02 19:51:55 EEST 2016 **

s....
####.
.....
.####
....g

[(0,0): S] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] 
[(0,1): W] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): F] 
[(0,2): F] [(1,2): F] [(2,2): F] [(3,2): F] [(4,2): F] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): W] [(4,3): W] 
[(0,4): F] [(1,4): F] [(2,4): F] [(3,4): F] [(4,4): G] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 2 ms

Tiles walked on: 
[0,0] type: START, distance: 0
[1,0] type: FLOOR, distance: 1
[2,0] type: FLOOR, distance: 2
[3,0] type: FLOOR, distance: 3
[4,1] type: FLOOR, distance: 4
[3,2] type: FLOOR, distance: 5
[2,2] type: FLOOR, distance: 6
[1,2] type: FLOOR, distance: 7
[0,3] type: FLOOR, distance: 8
[1,4] type: FLOOR, distance: 9
[2,4] type: FLOOR, distance: 10
[3,4] type: FLOOR, distance: 11
[4,4] type: GOAL, distance: 12

Dijkstra out!


 ** Sun Oct 02 20:54:23 EEST 2016 **

.......
.###s..
#..##.#
.##..#.
#.#.#.#
##..#.#
..####.
#..##.#
....#.#
.####..
.#g##..
#.#.#..

[(0,0): F] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] [(5,0): F] [(6,0): F] 
[(0,1): F] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): S] [(5,1): F] [(6,1): F] 
[(0,2): W] [(1,2): F] [(2,2): F] [(3,2): W] [(4,2): W] [(5,2): F] [(6,2): W] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): F] [(4,3): F] [(5,3): W] [(6,3): F] 
[(0,4): W] [(1,4): F] [(2,4): W] [(3,4): F] [(4,4): W] [(5,4): F] [(6,4): W] 
[(0,5): W] [(1,5): W] [(2,5): F] [(3,5): F] [(4,5): W] [(5,5): F] [(6,5): W] 
[(0,6): F] [(1,6): F] [(2,6): W] [(3,6): W] [(4,6): W] [(5,6): W] [(6,6): F] 
[(0,7): W] [(1,7): F] [(2,7): F] [(3,7): W] [(4,7): W] [(5,7): F] [(6,7): W] 
[(0,8): F] [(1,8): F] [(2,8): F] [(3,8): F] [(4,8): W] [(5,8): F] [(6,8): W] 
[(0,9): F] [(1,9): W] [(2,9): W] [(3,9): W] [(4,9): W] [(5,9): F] [(6,9): F] 
[(0,10): F] [(1,10): W] [(2,10): G] [(3,10): W] [(4,10): W] [(5,10): F] [(6,10): F] 
[(0,11): W] [(1,11): F] [(2,11): W] [(3,11): F] [(4,11): W] [(5,11): F] [(6,11): F] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 3 ms

Tiles walked on: 
[4,1] type: START, distance: 0
[5,2] type: FLOOR, distance: 1
[4,3] type: FLOOR, distance: 2
[3,4] type: FLOOR, distance: 3
[2,5] type: FLOOR, distance: 4
[1,6] type: FLOOR, distance: 5
[1,7] type: FLOOR, distance: 6
[0,8] type: FLOOR, distance: 7
[0,9] type: FLOOR, distance: 8
[0,10] type: FLOOR, distance: 9
[1,11] type: FLOOR, distance: 10
[2,10] type: GOAL, distance: 11

Dijkstra out!


 ** Sun Oct 02 20:54:27 EEST 2016 **

s....
####.
.....
.####
....g

[(0,0): S] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] 
[(0,1): W] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): F] 
[(0,2): F] [(1,2): F] [(2,2): F] [(3,2): F] [(4,2): F] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): W] [(4,3): W] 
[(0,4): F] [(1,4): F] [(2,4): F] [(3,4): F] [(4,4): G] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 2 ms

Tiles walked on: 
[0,0] type: START, distance: 0
[1,0] type: FLOOR, distance: 1
[2,0] type: FLOOR, distance: 2
[3,0] type: FLOOR, distance: 3
[4,1] type: FLOOR, distance: 4
[3,2] type: FLOOR, distance: 5
[2,2] type: FLOOR, distance: 6
[1,2] type: FLOOR, distance: 7
[0,3] type: FLOOR, distance: 8
[1,4] type: FLOOR, distance: 9
[2,4] type: FLOOR, distance: 10
[3,4] type: FLOOR, distance: 11
[4,4] type: GOAL, distance: 12

Dijkstra out!
[(0,0): F] [(1,0): F] [(2,0): S] 
[(0,1): F] [(1,1): W] [(2,1): W] 
[(0,2): F] [(1,2): F] [(2,2): G] 
[(0,0): F] [(1,0): F] [(2,0): S] 
[(0,1): F] [(1,1): W] [(2,1): W] 
[(0,2): F] [(1,2): F] [(2,2): G] 


 ** Sun Oct 02 21:07:21 EEST 2016 **

s....
####.
.....
.####
....g

[(0,0): S] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] 
[(0,1): W] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): F] 
[(0,2): F] [(1,2): F] [(2,2): F] [(3,2): F] [(4,2): F] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): W] [(4,3): W] 
[(0,4): F] [(1,4): F] [(2,4): F] [(3,4): F] [(4,4): G] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 2 ms

Tiles walked on: 
[0,0] type: START, distance: 0
[1,0] type: FLOOR, distance: 1
[2,0] type: FLOOR, distance: 2
[3,0] type: FLOOR, distance: 3
[4,1] type: FLOOR, distance: 4
[3,2] type: FLOOR, distance: 5
[2,2] type: FLOOR, distance: 6
[1,2] type: FLOOR, distance: 7
[0,3] type: FLOOR, distance: 8
[1,4] type: FLOOR, distance: 9
[2,4] type: FLOOR, distance: 10
[3,4] type: FLOOR, distance: 11
[4,4] type: GOAL, distance: 12

Dijkstra out!
[(0,0): F] [(1,0): F] [(2,0): S] 
[(0,1): F] [(1,1): W] [(2,1): W] 
[(0,2): F] [(1,2): F] [(2,2): G] 
[(0,0): F] [(1,0): F] [(2,0): S] 
[(0,1): F] [(1,1): W] [(2,1): W] 
[(0,2): F] [(1,2): F] [(2,2): G] 


 ** Sun Oct 02 21:07:24 EEST 2016 **

s....
####.
.....
.####
....g

[(0,0): S] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] 
[(0,1): W] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): F] 
[(0,2): F] [(1,2): F] [(2,2): F] [(3,2): F] [(4,2): F] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): W] [(4,3): W] 
[(0,4): F] [(1,4): F] [(2,4): F] [(3,4): F] [(4,4): G] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 1 ms

Tiles walked on: 
[0,0] type: START, distance: 0
[1,0] type: FLOOR, distance: 1
[2,0] type: FLOOR, distance: 2
[3,0] type: FLOOR, distance: 3
[4,1] type: FLOOR, distance: 4
[3,2] type: FLOOR, distance: 5
[2,2] type: FLOOR, distance: 6
[1,2] type: FLOOR, distance: 7
[0,3] type: FLOOR, distance: 8
[1,4] type: FLOOR, distance: 9
[2,4] type: FLOOR, distance: 10
[3,4] type: FLOOR, distance: 11
[4,4] type: GOAL, distance: 12

Dijkstra out!
[(0,0): F] [(1,0): F] [(2,0): S] 
[(0,1): F] [(1,1): W] [(2,1): W] 
[(0,2): F] [(1,2): F] [(2,2): G] 
[(0,0): F] [(1,0): F] [(2,0): S] 
[(0,1): F] [(1,1): W] [(2,1): W] 
[(0,2): F] [(1,2): F] [(2,2): G] 


 ** Sun Oct 02 21:07:28 EEST 2016 **

.......
.###s..
#..##.#
.##..#.
#.#.#.#
##..#.#
..####.
#..##.#
....#.#
.####..
.#g##..
#.#.#..

[(0,0): F] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] [(5,0): F] [(6,0): F] 
[(0,1): F] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): S] [(5,1): F] [(6,1): F] 
[(0,2): W] [(1,2): F] [(2,2): F] [(3,2): W] [(4,2): W] [(5,2): F] [(6,2): W] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): F] [(4,3): F] [(5,3): W] [(6,3): F] 
[(0,4): W] [(1,4): F] [(2,4): W] [(3,4): F] [(4,4): W] [(5,4): F] [(6,4): W] 
[(0,5): W] [(1,5): W] [(2,5): F] [(3,5): F] [(4,5): W] [(5,5): F] [(6,5): W] 
[(0,6): F] [(1,6): F] [(2,6): W] [(3,6): W] [(4,6): W] [(5,6): W] [(6,6): F] 
[(0,7): W] [(1,7): F] [(2,7): F] [(3,7): W] [(4,7): W] [(5,7): F] [(6,7): W] 
[(0,8): F] [(1,8): F] [(2,8): F] [(3,8): F] [(4,8): W] [(5,8): F] [(6,8): W] 
[(0,9): F] [(1,9): W] [(2,9): W] [(3,9): W] [(4,9): W] [(5,9): F] [(6,9): F] 
[(0,10): F] [(1,10): W] [(2,10): G] [(3,10): W] [(4,10): W] [(5,10): F] [(6,10): F] 
[(0,11): W] [(1,11): F] [(2,11): W] [(3,11): F] [(4,11): W] [(5,11): F] [(6,11): F] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 2 ms

Tiles walked on: 
[4,1] type: START, distance: 0
[5,2] type: FLOOR, distance: 1
[4,3] type: FLOOR, distance: 2
[3,4] type: FLOOR, distance: 3
[2,5] type: FLOOR, distance: 4
[1,6] type: FLOOR, distance: 5
[1,7] type: FLOOR, distance: 6
[0,8] type: FLOOR, distance: 7
[0,9] type: FLOOR, distance: 8
[0,10] type: FLOOR, distance: 9
[1,11] type: FLOOR, distance: 10
[2,10] type: GOAL, distance: 11

Dijkstra out!


 ** Sun Oct 02 21:08:12 EEST 2016 **

.......
.###s..
#..##.#
.##..#.
#.#.#.#
##..#.#
..####.
#..##.#
....#.#
.####..
.#g##..
#.#.#..

[(0,0): F] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] [(5,0): F] [(6,0): F] 
[(0,1): F] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): S] [(5,1): F] [(6,1): F] 
[(0,2): W] [(1,2): F] [(2,2): F] [(3,2): W] [(4,2): W] [(5,2): F] [(6,2): W] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): F] [(4,3): F] [(5,3): W] [(6,3): F] 
[(0,4): W] [(1,4): F] [(2,4): W] [(3,4): F] [(4,4): W] [(5,4): F] [(6,4): W] 
[(0,5): W] [(1,5): W] [(2,5): F] [(3,5): F] [(4,5): W] [(5,5): F] [(6,5): W] 
[(0,6): F] [(1,6): F] [(2,6): W] [(3,6): W] [(4,6): W] [(5,6): W] [(6,6): F] 
[(0,7): W] [(1,7): F] [(2,7): F] [(3,7): W] [(4,7): W] [(5,7): F] [(6,7): W] 
[(0,8): F] [(1,8): F] [(2,8): F] [(3,8): F] [(4,8): W] [(5,8): F] [(6,8): W] 
[(0,9): F] [(1,9): W] [(2,9): W] [(3,9): W] [(4,9): W] [(5,9): F] [(6,9): F] 
[(0,10): F] [(1,10): W] [(2,10): G] [(3,10): W] [(4,10): W] [(5,10): F] [(6,10): F] 
[(0,11): W] [(1,11): F] [(2,11): W] [(3,11): F] [(4,11): W] [(5,11): F] [(6,11): F] 

Starting Dijkstra's algorithm
heap size after finding goal: 39
Dijkstra's algorithm done: Execution took 2 ms

Tiles walked on: 
[4,1] type: START, distance: 0
[5,2] type: FLOOR, distance: 1
[4,3] type: FLOOR, distance: 2
[3,4] type: FLOOR, distance: 3
[2,5] type: FLOOR, distance: 4
[1,6] type: FLOOR, distance: 5
[1,7] type: FLOOR, distance: 6
[0,8] type: FLOOR, distance: 7
[0,9] type: FLOOR, distance: 8
[0,10] type: FLOOR, distance: 9
[1,11] type: FLOOR, distance: 10
[2,10] type: GOAL, distance: 11

Dijkstra out!


 ** Sun Oct 02 21:08:43 EEST 2016 **

.......
.###s..
#..##.#
.##..#.
#.#.#.#
##..#.#
..####.
#..##.#
....#.#
.####..
.#g##..
#.#.#..

[(0,0): F] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] [(5,0): F] [(6,0): F] 
[(0,1): F] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): S] [(5,1): F] [(6,1): F] 
[(0,2): W] [(1,2): F] [(2,2): F] [(3,2): W] [(4,2): W] [(5,2): F] [(6,2): W] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): F] [(4,3): F] [(5,3): W] [(6,3): F] 
[(0,4): W] [(1,4): F] [(2,4): W] [(3,4): F] [(4,4): W] [(5,4): F] [(6,4): W] 
[(0,5): W] [(1,5): W] [(2,5): F] [(3,5): F] [(4,5): W] [(5,5): F] [(6,5): W] 
[(0,6): F] [(1,6): F] [(2,6): W] [(3,6): W] [(4,6): W] [(5,6): W] [(6,6): F] 
[(0,7): W] [(1,7): F] [(2,7): F] [(3,7): W] [(4,7): W] [(5,7): F] [(6,7): W] 
[(0,8): F] [(1,8): F] [(2,8): F] [(3,8): F] [(4,8): W] [(5,8): F] [(6,8): W] 
[(0,9): F] [(1,9): W] [(2,9): W] [(3,9): W] [(4,9): W] [(5,9): F] [(6,9): F] 
[(0,10): F] [(1,10): W] [(2,10): G] [(3,10): W] [(4,10): W] [(5,10): F] [(6,10): F] 
[(0,11): W] [(1,11): F] [(2,11): W] [(3,11): F] [(4,11): W] [(5,11): F] [(6,11): F] 

Starting Dijkstra's algorithm
heap size after finding goal: 39
Dijkstra's algorithm done: Execution took 2 ms

Tiles in the shortest path: 
[4,1] type: START, distance: 0
[5,2] type: FLOOR, distance: 1
[4,3] type: FLOOR, distance: 2
[3,4] type: FLOOR, distance: 3
[2,5] type: FLOOR, distance: 4
[1,6] type: FLOOR, distance: 5
[1,7] type: FLOOR, distance: 6
[0,8] type: FLOOR, distance: 7
[0,9] type: FLOOR, distance: 8
[0,10] type: FLOOR, distance: 9
[1,11] type: FLOOR, distance: 10
[2,10] type: GOAL, distance: 11

Dijkstra out!


 ** Sun Oct 02 21:09:03 EEST 2016 **

.......
.###s..
#..##.#
.##..#.
#.#.#.#
##..#.#
..####.
#..##.#
....#.#
.####..
.#g##..
#.#.#..

[(0,0): F] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] [(5,0): F] [(6,0): F] 
[(0,1): F] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): S] [(5,1): F] [(6,1): F] 
[(0,2): W] [(1,2): F] [(2,2): F] [(3,2): W] [(4,2): W] [(5,2): F] [(6,2): W] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): F] [(4,3): F] [(5,3): W] [(6,3): F] 
[(0,4): W] [(1,4): F] [(2,4): W] [(3,4): F] [(4,4): W] [(5,4): F] [(6,4): W] 
[(0,5): W] [(1,5): W] [(2,5): F] [(3,5): F] [(4,5): W] [(5,5): F] [(6,5): W] 
[(0,6): F] [(1,6): F] [(2,6): W] [(3,6): W] [(4,6): W] [(5,6): W] [(6,6): F] 
[(0,7): W] [(1,7): F] [(2,7): F] [(3,7): W] [(4,7): W] [(5,7): F] [(6,7): W] 
[(0,8): F] [(1,8): F] [(2,8): F] [(3,8): F] [(4,8): W] [(5,8): F] [(6,8): W] 
[(0,9): F] [(1,9): W] [(2,9): W] [(3,9): W] [(4,9): W] [(5,9): F] [(6,9): F] 
[(0,10): F] [(1,10): W] [(2,10): G] [(3,10): W] [(4,10): W] [(5,10): F] [(6,10): F] 
[(0,11): W] [(1,11): F] [(2,11): W] [(3,11): F] [(4,11): W] [(5,11): F] [(6,11): F] 

Starting Dijkstra's algorithm
Heap size after finding goal: 39
Dijkstra's algorithm done: Execution took 3 ms

Tiles in the shortest path: 
[4,1] type: START, distance: 0
[5,2] type: FLOOR, distance: 1
[4,3] type: FLOOR, distance: 2
[3,4] type: FLOOR, distance: 3
[2,5] type: FLOOR, distance: 4
[1,6] type: FLOOR, distance: 5
[1,7] type: FLOOR, distance: 6
[0,8] type: FLOOR, distance: 7
[0,9] type: FLOOR, distance: 8
[0,10] type: FLOOR, distance: 9
[1,11] type: FLOOR, distance: 10
[2,10] type: GOAL, distance: 11

Dijkstra out!


 ** Sun Oct 02 21:09:38 EEST 2016 **

.......
.###s..
#..##.#
.##..#.
#.#.#.#
##..#.#
..####.
#..##.#
.####..
.#g##..
#.#.#..

[(0,0): F] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] [(5,0): F] [(6,0): F] 
[(0,1): F] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): S] [(5,1): F] [(6,1): F] 
[(0,2): W] [(1,2): F] [(2,2): F] [(3,2): W] [(4,2): W] [(5,2): F] [(6,2): W] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): F] [(4,3): F] [(5,3): W] [(6,3): F] 
[(0,4): W] [(1,4): F] [(2,4): W] [(3,4): F] [(4,4): W] [(5,4): F] [(6,4): W] 
[(0,5): W] [(1,5): W] [(2,5): F] [(3,5): F] [(4,5): W] [(5,5): F] [(6,5): W] 
[(0,6): F] [(1,6): F] [(2,6): W] [(3,6): W] [(4,6): W] [(5,6): W] [(6,6): F] 
[(0,7): W] [(1,7): F] [(2,7): F] [(3,7): W] [(4,7): W] [(5,7): F] [(6,7): W] 
[(0,8): F] [(1,8): W] [(2,8): W] [(3,8): W] [(4,8): W] [(5,8): F] [(6,8): F] 
[(0,9): F] [(1,9): W] [(2,9): G] [(3,9): W] [(4,9): W] [(5,9): F] [(6,9): F] 
[(0,10): W] [(1,10): F] [(2,10): W] [(3,10): F] [(4,10): W] [(5,10): F] [(6,10): F] 

Starting Dijkstra's algorithm
Heap size after finding goal: 37
Dijkstra's algorithm done: Execution took 2 ms

Tiles in the shortest path: 
[4,1] type: START, distance: 0
[5,2] type: FLOOR, distance: 1
[4,3] type: FLOOR, distance: 2
[3,4] type: FLOOR, distance: 3
[2,5] type: FLOOR, distance: 4
[1,6] type: FLOOR, distance: 5
[1,7] type: FLOOR, distance: 6
[0,8] type: FLOOR, distance: 7
[0,9] type: FLOOR, distance: 8
[1,10] type: FLOOR, distance: 9
[2,9] type: GOAL, distance: 10
Dijkstra out!


 ** Sun Oct 02 21:12:14 EEST 2016 **

.......
.###s..
#..##.#
.##..#.
#.#.#.#
##..#.#
..####.
#..##.#
.####..
.#g##..
#.#.#..

[(0,0): F] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] [(5,0): F] [(6,0): F] 
[(0,1): F] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): S] [(5,1): F] [(6,1): F] 
[(0,2): W] [(1,2): F] [(2,2): F] [(3,2): W] [(4,2): W] [(5,2): F] [(6,2): W] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): F] [(4,3): F] [(5,3): W] [(6,3): F] 
[(0,4): W] [(1,4): F] [(2,4): W] [(3,4): F] [(4,4): W] [(5,4): F] [(6,4): W] 
[(0,5): W] [(1,5): W] [(2,5): F] [(3,5): F] [(4,5): W] [(5,5): F] [(6,5): W] 
[(0,6): F] [(1,6): F] [(2,6): W] [(3,6): W] [(4,6): W] [(5,6): W] [(6,6): F] 
[(0,7): W] [(1,7): F] [(2,7): F] [(3,7): W] [(4,7): W] [(5,7): F] [(6,7): W] 
[(0,8): F] [(1,8): W] [(2,8): W] [(3,8): W] [(4,8): W] [(5,8): F] [(6,8): F] 
[(0,9): F] [(1,9): W] [(2,9): G] [(3,9): W] [(4,9): W] [(5,9): F] [(6,9): F] 
[(0,10): W] [(1,10): F] [(2,10): W] [(3,10): F] [(4,10): W] [(5,10): F] [(6,10): F] 

Starting Dijkstra's algorithm
Heap size after finding goal: 37
Dijkstra's algorithm done: Execution took 6830 ms


 ** Sun Oct 02 21:12:35 EEST 2016 **

.......
.###s..
#..##.#
.##..#.
#.#.#.#
##..#.#
..####.
#..##.#
.####..
.#g##..
#.#.#..

[(0,0): F] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] [(5,0): F] [(6,0): F] 
[(0,1): F] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): S] [(5,1): F] [(6,1): F] 
[(0,2): W] [(1,2): F] [(2,2): F] [(3,2): W] [(4,2): W] [(5,2): F] [(6,2): W] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): F] [(4,3): F] [(5,3): W] [(6,3): F] 
[(0,4): W] [(1,4): F] [(2,4): W] [(3,4): F] [(4,4): W] [(5,4): F] [(6,4): W] 
[(0,5): W] [(1,5): W] [(2,5): F] [(3,5): F] [(4,5): W] [(5,5): F] [(6,5): W] 
[(0,6): F] [(1,6): F] [(2,6): W] [(3,6): W] [(4,6): W] [(5,6): W] [(6,6): F] 
[(0,7): W] [(1,7): F] [(2,7): F] [(3,7): W] [(4,7): W] [(5,7): F] [(6,7): W] 
[(0,8): F] [(1,8): W] [(2,8): W] [(3,8): W] [(4,8): W] [(5,8): F] [(6,8): F] 
[(0,9): F] [(1,9): W] [(2,9): G] [(3,9): W] [(4,9): W] [(5,9): F] [(6,9): F] 
[(0,10): W] [(1,10): F] [(2,10): W] [(3,10): F] [(4,10): W] [(5,10): F] [(6,10): F] 

Starting Dijkstra's algorithm
Heap size after finding goal: 37
Dijkstra's algorithm done: Execution took 2 ms

Tiles in the shortest path: 
[4,1] type: START, distance: 0
[5,2] type: FLOOR, distance: 1
[4,3] type: FLOOR, distance: 2
[3,4] type: FLOOR, distance: 3
[2,5] type: FLOOR, distance: 4
[1,6] type: FLOOR, distance: 5
[1,7] type: FLOOR, distance: 6
[0,8] type: FLOOR, distance: 7
[0,9] type: FLOOR, distance: 8
[1,10] type: FLOOR, distance: 9
[2,9] type: GOAL, distance: 10
Dijkstra out!


 ** Sun Oct 02 23:17:46 EEST 2016 **

.......
.###s..
#..##.#
.##..#.
#.#.#.#
##..#.#
..####.
#..##.#
.####..
.#g##..
#.#.#..

[(0,0): F] [(1,0): F] [(2,0): F] [(3,0): F] [(4,0): F] [(5,0): F] [(6,0): F] 
[(0,1): F] [(1,1): W] [(2,1): W] [(3,1): W] [(4,1): S] [(5,1): F] [(6,1): F] 
[(0,2): W] [(1,2): F] [(2,2): F] [(3,2): W] [(4,2): W] [(5,2): F] [(6,2): W] 
[(0,3): F] [(1,3): W] [(2,3): W] [(3,3): F] [(4,3): F] [(5,3): W] [(6,3): F] 
[(0,4): W] [(1,4): F] [(2,4): W] [(3,4): F] [(4,4): W] [(5,4): F] [(6,4): W] 
[(0,5): W] [(1,5): W] [(2,5): F] [(3,5): F] [(4,5): W] [(5,5): F] [(6,5): W] 
[(0,6): F] [(1,6): F] [(2,6): W] [(3,6): W] [(4,6): W] [(5,6): W] [(6,6): F] 
[(0,7): W] [(1,7): F] [(2,7): F] [(3,7): W] [(4,7): W] [(5,7): F] [(6,7): W] 
[(0,8): F] [(1,8): W] [(2,8): W] [(3,8): W] [(4,8): W] [(5,8): F] [(6,8): F] 
[(0,9): F] [(1,9): W] [(2,9): G] [(3,9): W] [(4,9): W] [(5,9): F] [(6,9): F] 
[(0,10): W] [(1,10): F] [(2,10): W] [(3,10): F] [(4,10): W] [(5,10): F] [(6,10): F] 

Starting Dijkstra's algorithm
Dijkstra's algorithm done: Execution took 2 ms

Tiles in the shortest path: 
[4,1] type: START, distance: 0
[5,2] type: FLOOR, distance: 1
[4,3] type: FLOOR, distance: 2
[3,4] type: FLOOR, distance: 3
[2,5] type: FLOOR, distance: 4
[1,6] type: FLOOR, distance: 5
[1,7] type: FLOOR, distance: 6
[0,8] type: FLOOR, distance: 7
[0,9] type: FLOOR, distance: 8
[1,10] type: FLOOR, distance: 9
[2,9] type: GOAL, distance: 10
Dijkstra out!
